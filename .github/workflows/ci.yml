name: PHP → GitHub Pages (static datasets)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: shivammathur/setup-php@v2
        with:
          php-version: "8.3"
          tools: composer
      - name: Install deps
        run: composer install --prefer-dist --no-interaction
      - name: Run tests
        run: vendor/bin/phpunit --display-warnings

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: shivammathur/setup-php@v2
        with:
          php-version: "8.3"
          tools: composer
      - name: Install deps
        run: composer install --prefer-dist --no-interaction

      - name: Generate static datasets with PHP
        env:
          PUZZLES_PER_SET: "15"   # súbelo si quieres más variedad
        run: |
          mkdir -p dist
          mkdir -p dist/data
          cat > scripts/build-static.php <<'PHP'
          <?php
          declare(strict_types=1);
          require __DIR__ . '/../vendor/autoload.php';
          use App\Sudoku;
          $dist = __DIR__ . '/../dist/data';
          $sizes = [4,6,9]; $diffs = ['easy','medium','hard'];
          $count = (int)($_ENV['PUZZLES_PER_SET'] ?? 15);
          foreach ($sizes as $n) {
            foreach ($diffs as $d) {
              $set = [];
              for ($i=0; $i<$count; $i++) {
                $g = Sudoku::generate($n, $d);
                $set[] = ['puzzle'=>$g['puzzle'], 'solution'=>$g['solution']];
              }
              $file = sprintf('%s/%dx%d-%s.json', $dist, $n, $n, $d);
              file_put_contents($file, json_encode($set, JSON_UNESCAPED_UNICODE));
            }
          }
          PHP
          php scripts/build-static.php

      - name: Create static UI index.html
        run: |
          cat > dist/index.html <<'HTML'
          <!doctype html><html lang="es" data-theme="dark"><head>
          <meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1">
          <title>Sudoku (4x4 / 6x6 / 9x9)</title><meta name="color-scheme" content="dark light">
          <style>:root{color-scheme:dark light;--bg:#0b0f14;--panel:#121821;--text:#e6edf3;--muted:#9fb1c1;--accent:#6aa9ff;--error:#ff6a6a;--ok:#6aff9c;--cell:#1a2330;--cell-alt:#1f2a3a;--cell-fixed:#263448;--cell-highlight:#243349;--border:#2a3a52}
          html[data-theme=light]{--bg:#f6f8fa;--panel:#fff;--text:#0a0f14;--muted:#4a5a6b;--accent:#005fcc;--error:#c62828;--ok:#2e7d32;--cell:#fff;--cell-alt:#f2f6fa;--cell-fixed:#e9eef5;--cell-highlight:#dce8f8;--border:#d0d8e2}
          *{box-sizing:border-box}body{margin:0;font-family:system-ui,Segoe UI,Roboto;background:var(--bg);color:var(--text);min-height:100dvh;display:grid;place-items:start center;padding:24px}
          header{display:flex;gap:12px;flex-wrap:wrap;align-items:center;justify-content:space-between;background:var(--panel);padding:12px 16px;border:1px solid var(--border);border-radius:14px;margin-bottom:16px;box-shadow:0 6px 24px rgba(0,0,0,.2)}
          .controls{display:flex;gap:8px;flex-wrap:wrap;align-items:center}
          select,button{appearance:none;border:1px solid var(--border);background:var(--panel);color:var(--text);padding:8px 12px;border-radius:10px;cursor:pointer;font-size:14px}
          button:hover{filter:brightness(1.08)}button:disabled{opacity:.6;cursor:not-allowed}
          .timer,.status{font-variant-numeric:tabular-nums;color:var(--muted)}
          .board{display:grid;gap:2px;background:var(--border);border:2px solid var(--border);border-radius:12px;overflow:hidden;margin-top:12px}
          .cell{background:var(--cell);width:42px;height:42px;display:grid;place-items:center;font-weight:600;border:1px solid var(--border)}
          .cell:nth-child(odd){background:var(--cell-alt)}.cell.fixed{background:var(--cell-fixed);color:var(--muted)}
          .cell.error{outline:2px solid var(--error)}.cell.highlight{background:var(--cell-highlight)}
          .footer-info{margin-top:12px;color:var(--muted);font-size:14px;display:flex;gap:12px;align-items:center;flex-wrap:wrap}
          a{color:var(--accent)}kbd{background:var(--cell);border:1px solid var(--border);border-radius:6px;padding:2px 6px}</style></head><body>
          <div id="app"></div>
          <script>
          const $=(s,c=document)=>c.querySelector(s), $$=(s,c=document)=>Array.from(c.querySelectorAll(s));
          const fmt=(t)=>{const h=Math.floor(t/3600),m=Math.floor((t%3600)/60),s=t%60;return (h?h+':':'')+String(m).padStart(2,'0')+':'+String(s).padStart(2,'0')};
          const cache={}; async function loadSet(size,diff){const k=`${size}-${diff}`; if(!cache[k]){const res=await fetch(`data/${size}x${size}-${diff}.json`); cache[k]=await res.json();} return cache[k];}
          class App{constructor(root){this.root=root;this.state={size:9,difficulty:'easy',puzzle:null,solution:null,current:null,fixed:null,selected:null,startTs:Date.now(),elapsedSec:0,running:true,dark:true};
            document.documentElement.setAttribute('data-theme','dark'); this.render(); this.newPuzzle();
            this.timer=setInterval(()=>{if(this.state.running){this.state.elapsedSec=Math.floor((Date.now()-this.state.startTs)/1000); const t=$('.timer'); if(t) t.textContent='⏱️ '+fmt(this.state.elapsedSec);}},1000);
            document.addEventListener('keydown',e=>{if(e.key==='ArrowUp'){e.preventDefault();return this.move(-1,0)}if(e.key==='ArrowDown'){e.preventDefault();return this.move(1,0)}if(e.key==='ArrowLeft'){e.preventDefault();return this.move(0,-1)}if(e.key==='ArrowRight'){e.preventDefault();return this.move(0,1)}
              if(!this.state.selected)return; const [r,c]=this.state.selected; if(this.state.fixed[r][c])return;
              if(e.key==='Backspace'||e.key==='Delete'){e.preventDefault();this.state.current[r][c]=0;return this.renderBoard();}
              const n=parseInt(e.key,10); if(!Number.isNaN(n)&&n>=0&&n<=this.state.size){e.preventDefault();this.state.current[r][c]=n===0?0:n; this.renderBoard();}});
          }
            async newPuzzle(){const set=await loadSet(this.state.size,this.state.difficulty); const pick=set[Math.floor(Math.random()*set.length)];
              this.state.puzzle=pick.puzzle; this.state.solution=pick.solution; this.state.current=JSON.parse(JSON.stringify(this.state.puzzle));
              this.state.fixed=this.state.puzzle.map(r=>r.map(v=>v!==0)); this.state.running=true; this.state.startTs=Date.now(); this.selectFirst(); this.renderBoard(); $('.status').textContent='Listo.';}
            selectFirst(){for(let r=0;r<this.state.size;r++)for(let c=0;c<this.state.size;c++)if(!this.state.fixed[r][c]){this.state.selected=[r,c];return} this.state.selected=[0,0]}
            move(dr,dc){if(!this.state.selected){this.selectFirst();return} const n=this.state.size; let [r,c]=this.state.selected;
              for(let k=0;k<n*n;k++){r=(r+dr+n)%n; c=(c+dc+n)%n; if(!this.state.fixed[r][c]){this.state.selected=[r,c];break}} this.renderBoard()}
            hint(){for(let r=0;r<this.state.size;r++)for(let c=0;c<this.state.size;c++)if(this.state.current[r][c]===0){this.state.current[r][c]=this.state.solution[r][c]; return this.renderBoard();}}
            check(){const e=[]; for(let r=0;r<this.state.size;r++)for(let c=0;c<this.state.size;c++){const v=this.state.current[r][c]; if(v!==0&&v!==this.state.solution[r][c])e.push([r,c])}
              $$('.cell').forEach(x=>x.classList.remove('error')); for(const [r,c] of e){const i=r*this.state.size+c; $$('.cell')[i].classList.add('error')}
              if(e.length===0&&this.state.current.flat().every(x=>x!==0)){$('.status').textContent='✔️ ¡Completado!'; this.state.running=false}
              else if(e.length===0){$('.status').textContent='ℹ️ Sin errores (aún no completo).'} else {$('.status').textContent=`❌ ${e.length} error(es).`}}
            solve(){this.state.current=JSON.parse(JSON.stringify(this.state.solution)); this.state.running=false; this.renderBoard(); $('.status').textContent='🧠 Resuelto automáticamente.'}
            theme(btn){this.state.dark=!this.state.dark; document.documentElement.setAttribute('data-theme',this.state.dark?'dark':'light'); btn.textContent=this.state.dark?'🌙 Oscuro':'🌞 Claro'}
            renderControls(){const h=document.createElement('header'), L=document.createElement('div'); L.className='controls';
              const s=document.createElement('select'); s.innerHTML='<option value="4">4x4</option><option value="6">6x6</option><option value="9">9x9</option>'; s.value=String(this.state.size); s.onchange=()=>{this.state.size=parseInt(s.value,10); this.newPuzzle()};
              const d=document.createElement('select'); d.innerHTML='<option value="easy">Fácil</option><option value="medium">Media</option><option value="hard">Difícil</option>'; d.value=this.state.difficulty; d.onchange=()=>{this.state.difficulty=d.value; this.newPuzzle()};
              const bN=document.createElement('button'); bN.textContent='🆕 Nuevo'; bN.onclick=()=>this.newPuzzle();
              const bH=document.createElement('button'); bH.textContent='💡 Pista'; bH.onclick=()=>this.hint();
              const bC=document.createElement('button'); bC.textContent='✔️ Check'; bC.onclick=()=>this.check();
              const bS=document.createElement('button'); bS.textContent='🧩 Solución'; bS.onclick=()=>this.solve();
              const bT=document.createElement('button'); bT.textContent='🌙 Oscuro'; bT.onclick=()=>this.theme(bT);
              L.append(s,d,bN,bH,bC,bS,bT);
              const R=document.createElement('div'); R.className='controls'; const t=document.createElement('div'); t.className='timer'; t.textContent='⏱️ 00:00';
              const st=document.createElement('div'); st.className='status'; st.textContent='Listo.'; R.append(t,st);
              h.append(L,R); return h;}
            renderBoard(){const host=$('.board-host'); host.innerHTML=''; const n=this.state.size, board=document.createElement('div'); board.className='board';
              board.style.gridTemplateColumns=`repeat(${n},42px)`; board.style.gridTemplateRows=`repeat(${n},42px)`;
              for(let r=0;r<n;r++)for(let c=0;c<n;c++){const el=document.createElement('div'); el.className='cell';
                if(this.state.fixed[r][c]&&this.state.puzzle[r][c]!==0)el.classList.add('fixed');
                el.textContent=this.state.current[r][c]?String(this.state.current[r][c]):''; el.onclick=()=>{this.state.selected=[r,c]; $$('.cell').forEach(e=>e.classList.remove('highlight')); el.classList.add('highlight')}; board.appendChild(el)}
              host.append(board); if(this.state.selected){const [rs,cs]=this.state.selected, idx=rs*this.state.size+cs, e=$$('.cell')[idx]; if(e)e.classList.add('highlight')}}
            render(){this.root.innerHTML=''; this.root.appendChild(this.renderControls()); const bh=document.createElement('div'); bh.className='board-host'; this.root.appendChild(bh);
              const f=document.createElement('div'); f.className='footer-info'; f.innerHTML='<span>Usa <kbd>1..n</kbd> y <kbd>Backspace</kbd>. Flechas para moverte.</span><span>Subcuadros 2x2 / 2x3 / 3x3 según tamaño.</span>'; this.root.appendChild(f)}
          }
          new App(document.getElementById('app'));
          </script></body></html>
          HTML

      - name: Upload artifact (only once)
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
